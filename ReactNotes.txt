Video :-https://www.youtube.com/watch?v=w7ejDZ8SWv8&list=WL&index=20
Time :- 1.06.19 minutes

React JS is a library.It is NOT a framework like Angular / Vue JS.
React JS is not having its own router. We have to install extra package react-router-dom. 
It has entire eco-system of packageto install to make it function as a full fledge framework.
MVC framework :-
Model deals with Data
Conroller deals witn requests & routing  
View is User Interface
Why we should use React ?
    - It structures the View layer of the application
    - It has re-usable components which hold their own state & data
    - JSX - Javascript Syntax Extension - It allows us to write dynamic HTML
    - Apps which are built with react are interactive as it uses Virtual dom. 
    Bceuase of that we do not have refresh the page. 
    - All the data in the state is immutable. It means we can not modify (mutate) it directly    

Components in React :-
    It render/return JSX (JSX) - it looks like HTML
    We can embed components into another components 
    Components are dynamic mock-up - they can contain states
    state - detemines how a component renders & behaves
    Any data that is displayed in component is state

States in react :-
In order to share data within multiple compoenent use "App" state or "global" state.
If there are ton of App level states, that gets difficult to manage. In that case we can use :-
Context API OR REDUX

Create React App :-
    Use NPM version > 5.2
    Use below command :- 
        npx create-react-app react-task-tracker

Below packages are present in package.json file of the project :-
react-dom - is responsible for rendering the DOM
react-scripts - it has development server, build tool

index.html is only 1 HTML used - it is a single page application.
It has <div id="root"></div>
It is the entry point of the react application
<App /> is a root component

Component return some tags - it looks like HTML but it is JSX -> Javascript Syntax Extension
we can not use class attribute -> instead of that we use className
label with for attribute -> instead of that use htmlFor

in App.js file we need to return a single parent element 
e.g:- 
function App() {
    return {
        <div>
            <span></span>            
        </div>
    }
}

we can not return 2 sibling elements
e.g:- 
function App() {
    return {
        <div>
            <span></span>            
        </div>
        <div>               // This is not allowed
            <span></span>            
        </div>
    }
}

If we do not want to wrap the component element into parent HTML element then we can use empty fragment (empty brackets)
e.g:- 
function App() {
    return {
        <>
            <span></span>            
        </>
    }
}
We can write javascript in JSX
e.g:- 
const name = 'Julia';
const success = true;
function App() {
    return {
        <div>
            <span>Hello {1+1}</span>    // do some arithmatic operations      
            <span>Hello {name}</span>   // use name variable
            <span>Hello {success ? 'All' : 'Everyone' }</span>   // use ternary operator
        </div>        
    }
}

component file name should start with uppercase letter :- App.js, Header.js, Card.js

if we create class based component then we have to import react
e.g:-
import React from 'react'

class App extends React.Component {
    render() {
        <div>
        </div>
    }
}
export defaul App

use below command to start the server - so that we can see react app in localhost
----------------------------------------
Pass property into component

e.g: -
Componenet :-

function Header(props) {
    return (
        <h1>
            {props.title}
        </h1>
    );
}
export default Header;

Consumer (parent) :-
function App() {
  return (
    <div className="App">
      <Header title="Task Tracker App"/>
    </div>
  );
}

----------------------------------------
Create default peoperties in to component :-
Header.defaultProps = {
    title: 'Default Title'
}

----------------------------------------
PropTypes :-

By using PropTypes, we can assign a data type to property 
we need to import PropTypes

e.g:-
import PropTypes from 'prop-types'

Header.proptypes = {
    title: PropTypes.string
}

It helps to make our code more robust & catch the errors.
We can use TypeScript with React instead of PropTypes
----------------------------------------
CSS 
We can use style component for styling - it is a external package
----------------------------------------
We can use inline style in JSX 

<h1 style={{color: 'red', backgroundColor: 'black'}}>
    App Title
</h1>
----------------------------------------
useState from react to save the data needed for the app.
state is immutable so you can not modify the data directly.
e.g:- you are using 'tasks' array to display the array.
If we want to add any task to the array we can not directly use method tasks.push().
We need to use setTasks() method of the state